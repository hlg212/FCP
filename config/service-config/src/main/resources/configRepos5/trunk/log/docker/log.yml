
htcf:
  fwrz:
    qqcc-length: 10000000

      
  datasource:
    gayyptv2:
      url: ${htcf.db.${spring.application.name}.url:jdbc:p6spy:h2:~/${spring.application.name}1;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE}
      username: ${htcf.db.${spring.application.name}.username:${htcf.env}_${spring.application.name}}
      password: ${htcf.db.${spring.application.name}.password:${htcf.env}_${spring.application.name}}
      driver-class-name: com.p6spy.engine.spy.P6SpyDriver
      # 连接池的配置信息
      # 初始化大小，最小，最大
      initial-size: 0
      min-idle: 2
      max-active: 5
      # 配置获取连接等待超时的时间
      max-wait: 6000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 3600000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 30000
      validation-query: select 'x' from dual
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat
      isDefault: true

spring:
  autoconfigure:
    exclude:
      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure
      
  shardingsphere:
    datasource:
      names: gayyptv2

      gayyptv2:
        type: com.alibaba.druid.pool.DruidDataSource
        url: ${htcf.db.${spring.application.name}.url:jdbc:p6spy:h2:~/${spring.application.name}1;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE}
        username: ${htcf.db.${spring.application.name}.username:${htcf.env}_${spring.application.name}}
        password: ${htcf.db.${spring.application.name}.password:${htcf.env}_${spring.application.name}}
        driver-class-name: com.p6spy.engine.spy.P6SpyDriver
        # 连接池的配置信息
        # 初始化大小，最小，最大
        initial-size: 0
        min-idle: 2
        max-active: 5
        # 配置获取连接等待超时的时间
        max-wait: 6000
        # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
        time-between-eviction-runs-millis: 3600000
        # 配置一个连接在池中最小生存的时间，单位是毫秒
        min-evictable-idle-time-millis: 30000
        validation-query: select 'x' from dual
        test-while-idle: true
        test-on-borrow: false
        test-on-return: false
        # 打开PSCache，并且指定每个连接上PSCache的大小
        pool-prepared-statements: true
        max-pool-prepared-statement-per-connection-size: 20
        # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
        filters: stat

    sharding:
      tables:
        t_log_fwrz:
          actual-data-nodes: gayyptv2.t_log_fwrz,gayyptv2.t_log_fwrz_$->{201901..202912}
          table-strategy:
#            inline:
#              sharding-column: KSSJ
#              algorithm-expression: t_log_fwrz_$->{KSSJ.format('yyyyMM')}
            standard:
              precise-algorithm-class-name: com.htcf.log.sharding.KssjRangeShardingAlgorithm
              range-algorithm-class-name: com.htcf.log.sharding.KssjRangeShardingAlgorithm
              sharding-column: KSSJ

        t_log_swrz:
          actual-data-nodes: gayyptv2.t_log_swrz,gayyptv2.t_log_swrz_$->{201901..202912}
          table-strategy:
            standard:
              precise-algorithm-class-name: com.htcf.log.sharding.KssjRangeShardingAlgorithm
              range-algorithm-class-name: com.htcf.log.sharding.KssjRangeShardingAlgorithm
              sharding-column: KSSJ

        t_log_sjrz:
          actual-data-nodes: gayyptv2.t_log_sjrz,gayyptv2.t_log_sjrz_$->{201901..202912}
          table-strategy:
            standard:
              precise-algorithm-class-name: com.htcf.log.sharding.KssjRangeShardingAlgorithm
              range-algorithm-class-name: com.htcf.log.sharding.KssjRangeShardingAlgorithm
              sharding-column: FSSJ

        t_sjrzcc:
          actual-data-nodes: gayyptv2.t_sjrzcc,gayyptv2.t_sjrzcc_$->{201901..202912}
          table-strategy:
            complex:
              algorithm-class-name: com.htcf.log.sharding.SjrzsjccComplexShardingAlgorithm
              sharding-columns: YYBM,BM

  cloud:
    stream:
      rabbit:
        bindings:
          eventServiceBusAccessLogInput:
            consumer:
              prefetch: 100
             # exclusive: true
          eventServiceBusTransactionLogInput:
            consumer:
              prefetch: 100
          eventServiceBusTransactionSqlLogInput:
            consumer:
              prefetch: 1
              exclusive: true
      bindings:
        eventServiceBusAccessLogInput:
          binder: eventServiceBus
          destination: ${htcf.esb.destination}.accessLog
          group: ${spring.application.name}

        eventServiceBusTransactionLogInput:
          binder: eventServiceBus
          destination: ${htcf.esb.destination}.transactionLog
          group: ${spring.application.name}

        eventServiceBusTransactionSqlLogInput:
          binder: eventServiceBus
          destination: ${htcf.esb.destination}.transactionSqlLog
          group: ${spring.application.name}